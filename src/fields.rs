//! Various prime order fields. Each is defined in its own submodule because otherwise the names of
//! items generated by the [`ff::PrimeField`] macro collide.

pub mod fieldp256 {
    /// FieldP256 is the field for the NIST P256 elliptic curve.
    ///
    /// The generator is computed in [SageMath][1].
    ///
    /// [1]: 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff
    #[derive(ff::PrimeField)]
    #[PrimeFieldModulus = "115792089210356248762697446949407573530086143415290314195533631308867097853951"]
    #[PrimeFieldGenerator = "6"]
    #[PrimeFieldReprEndianness = "little"]
    pub struct FieldP256([u64; 5]);
}

pub mod fieldp128 {
    /// FieldP128 is the field with modulus 2^128 - 2^108 + 1, described in [Section 7.2 of
    /// draft-google-cfrg-libzk-00][1]. The field does not get a name in the draft, but P128 comes from
    /// the longfellow implementation ([3]).
    ///
    /// The generator was computed in SageMath as `GF(2^128-2^108+1).primitive_element()` (thanks to the
    /// hint in [`PrimeField::MULTIPLICATIVE_GENERATOR`]).
    ///
    /// The endianness is per [Section 7.2.1 of draft-google-cfrg-libzk-00][2].
    ///
    /// [1]: https://www.ietf.org/id/draft-google-cfrg-libzk-00.html#section-7.2
    /// [2]: https://www.ietf.org/id/draft-google-cfrg-libzk-00.html#section-7.2.1
    /// [3]: https://github.com/google/longfellow-zk/blob/main/lib/algebra/fp_p128.h
    #[derive(ff::PrimeField)]
    #[PrimeFieldModulus = "340282042402384805036647824275747635201"]
    #[PrimeFieldGenerator = "59"]
    #[PrimeFieldReprEndianness = "little"]
    // ff requires that the repr be an array of u64 and despite the fact that 128 bits should be big
    // enough, also requires 3 u64s.
    pub struct FieldP128([u64; 3]);
}
